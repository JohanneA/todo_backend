package com.hexagonkt.todokt.backend

import com.hexagonkt.helpers.CodedException
import com.hexagonkt.helpers.Jvm.name
import com.hexagonkt.helpers.Resource
import com.hexagonkt.http.get
import com.hexagonkt.http.server.Call
import com.hexagonkt.http.server.Server
import com.hexagonkt.http.server.jetty.JettyServletAdapter
import com.hexagonkt.serialization.Json
import com.hexagonkt.settings.SettingsManager.requireSetting
import com.hexagonkt.store.mongodb.MongoDbStore
import com.hexagonkt.templates.pebble.PebbleAdapter
import com.hexagonkt.todokt.backend.TaskPriority.NORMAL
import com.hexagonkt.web.template
import sun.nio.cs.UTF_32
import java.time.LocalDateTime
import kotlin.text.Charsets.UTF_8

/**
 * Task priority.
 */
enum class TaskPriority { HIGH, NORMAL, LOW }

/**
 * Task entity.
 */
data class Task(
    val id: Long,
    val name: String,
    val labels: List<String> = emptyList(),
    val priority: TaskPriority = NORMAL,
    val createdAt: LocalDateTime = LocalDateTime.now(),
    val completedAt: LocalDateTime? = null,
    val deletedAt: LocalDateTime? = null
)

/** Store for tasks. */
val store = MongoDbStore(Task::class, Task::id, requireSetting("mongoDbUrl") as String)

fun main(vararg args: String) {
    val server = Server(JettyServletAdapter()) {
        // Serves 'resources/public' classpath folder from servers root '/'
        get("/public")

        // Renders index page from Pebble template. SPA which code is generated by Frontend module
        get {
            template(PebbleAdapter, "index.html")
        }

        path("/tasks") {
            cors()

            get("/") {
                path("/") {
                    ok(store.findAll(), charset = UTF_8)
                }
            }

            get("/{id}") {
                val id = request.pathParameters["id"].toLong()

                val task = store.findOne(id) ?: halt(404, "Task with id $id not found")


                ok(task, charset = UTF_8)

            }

            post {
                val taskCreationRequest = request.body<TaskCreationRequestRoot>().task
                val task = Task(
                    id       = generateId(),
                    name     = taskCreationRequest.name,
                    labels   = taskCreationRequest.labels ?: emptyList(),
                    priority = taskCreationRequest.priority ?: NORMAL
                )

                val taskResponse = TaskCreationResponseRoot(
                    TaskCreationResponse(
                        id          = task.id,
                        name        = task.name,
                        labels      = task.labels,
                        priority    = task.priority,
                        createdAt   = task.createdAt
                    )
                )

                ok(taskResponse, charset = UTF_8)

                store.saveOne(task)
            }
            delete { store.drop() }
        }


        // Todo: Error handling
    }

    server.start()
}

internal fun generateId(): Long {
    return 1
}
